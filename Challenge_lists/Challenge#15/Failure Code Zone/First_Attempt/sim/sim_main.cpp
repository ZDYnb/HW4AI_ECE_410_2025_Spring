
// sim_main.cpp: C++ testbench for token_embedding.v (compiled via Verilator)

#include "Vtoken_embedding.h"         // Generated by Verilator
#include "verilated.h"

int main(int argc, char **argv) {
    Verilated::commandArgs(argc, argv);

    // Instantiate the design
    Vtoken_embedding* dut = new Vtoken_embedding;

    // Initialize clock and inputs
    dut->clk = 0;
    dut->token_id = 0;

    // Reset logic (optional if you have reset)
    for (int i = 0; i < 2; ++i) {
        dut->clk = !dut->clk;
        dut->eval();
    }

    // Apply stimulus
    for (int token = 0; token < 3; ++token) {
        dut->token_id = token;

        for (int cycle = 0; cycle < 2; ++cycle) {
            dut->clk = !dut->clk;
            dut->eval();
        }

        printf("Token %d -> [%d, %d, %d, %d]\n", token,
               dut->embedding_vector0,
               dut->embedding_vector1,
               dut->embedding_vector2,
               dut->embedding_vector3);
    }

    delete dut;
    return 0;
}
