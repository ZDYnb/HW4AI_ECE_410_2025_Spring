<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="874" onload="init(evt)" viewBox="0 0 1200 874" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="874" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o tiny_transformer_flame.svg -- python tiny_transformer.py</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="863.00"> </text><svg id="frames" x="10" width="1180" total_samples="2773"><g><title>&lt;module&gt; (numpy\__init__.py:114) (5 samples, 0.18%)</title><rect x="0.0000%" y="164" width="0.1803%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (5 samples, 0.18%)</title><rect x="0.0000%" y="180" width="0.1803%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (5 samples, 0.18%)</title><rect x="0.0000%" y="196" width="0.1803%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (5 samples, 0.18%)</title><rect x="0.0000%" y="212" width="0.1803%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (5 samples, 0.18%)</title><rect x="0.0000%" y="228" width="0.1803%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (5 samples, 0.18%)</title><rect x="0.0000%" y="244" width="0.1803%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="254.50"></text></g><g><title>&lt;module&gt; (numpy\__config__.py:4) (5 samples, 0.18%)</title><rect x="0.0000%" y="260" width="0.1803%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (5 samples, 0.18%)</title><rect x="0.0000%" y="276" width="0.1803%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:992) (5 samples, 0.18%)</title><rect x="0.0000%" y="292" width="0.1803%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="302.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (5 samples, 0.18%)</title><rect x="0.0000%" y="308" width="0.1803%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="318.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (5 samples, 0.18%)</title><rect x="0.0000%" y="324" width="0.1803%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="334.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (5 samples, 0.18%)</title><rect x="0.0000%" y="340" width="0.1803%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="350.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (5 samples, 0.18%)</title><rect x="0.0000%" y="356" width="0.1803%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="366.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (5 samples, 0.18%)</title><rect x="0.0000%" y="372" width="0.1803%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (5 samples, 0.18%)</title><rect x="0.0000%" y="388" width="0.1803%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:879) (4 samples, 0.14%)</title><rect x="0.1803%" y="804" width="0.1442%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="4"/><text x="0.4303%" y="814.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:975) (4 samples, 0.14%)</title><rect x="0.1803%" y="820" width="0.1442%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="4"/><text x="0.4303%" y="830.50"></text></g><g><title>get_data (&lt;frozen importlib._bootstrap_external&gt;:1073) (4 samples, 0.14%)</title><rect x="0.1803%" y="836" width="0.1442%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="4"/><text x="0.4303%" y="846.50"></text></g><g><title>&lt;module&gt; (numpy\lib\_utils_impl.py:3) (5 samples, 0.18%)</title><rect x="0.1803%" y="740" width="0.1803%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="5"/><text x="0.4303%" y="750.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (5 samples, 0.18%)</title><rect x="0.1803%" y="756" width="0.1803%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="5"/><text x="0.4303%" y="766.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (5 samples, 0.18%)</title><rect x="0.1803%" y="772" width="0.1803%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="5"/><text x="0.4303%" y="782.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (5 samples, 0.18%)</title><rect x="0.1803%" y="788" width="0.1803%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="5"/><text x="0.4303%" y="798.50"></text></g><g><title>&lt;module&gt; (numpy\lib\_npyio_impl.py:17) (6 samples, 0.22%)</title><rect x="0.1803%" y="516" width="0.2164%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="6"/><text x="0.4303%" y="526.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1078) (6 samples, 0.22%)</title><rect x="0.1803%" y="532" width="0.2164%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="6"/><text x="0.4303%" y="542.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (6 samples, 0.22%)</title><rect x="0.1803%" y="548" width="0.2164%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="6"/><text x="0.4303%" y="558.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (6 samples, 0.22%)</title><rect x="0.1803%" y="564" width="0.2164%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="6"/><text x="0.4303%" y="574.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (6 samples, 0.22%)</title><rect x="0.1803%" y="580" width="0.2164%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="6"/><text x="0.4303%" y="590.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (6 samples, 0.22%)</title><rect x="0.1803%" y="596" width="0.2164%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="6"/><text x="0.4303%" y="606.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (6 samples, 0.22%)</title><rect x="0.1803%" y="612" width="0.2164%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="6"/><text x="0.4303%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (6 samples, 0.22%)</title><rect x="0.1803%" y="628" width="0.2164%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="6"/><text x="0.4303%" y="638.50"></text></g><g><title>&lt;module&gt; (numpy\lib\format.py:170) (6 samples, 0.22%)</title><rect x="0.1803%" y="644" width="0.2164%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="6"/><text x="0.4303%" y="654.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (6 samples, 0.22%)</title><rect x="0.1803%" y="660" width="0.2164%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="6"/><text x="0.4303%" y="670.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (6 samples, 0.22%)</title><rect x="0.1803%" y="676" width="0.2164%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="6"/><text x="0.4303%" y="686.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (6 samples, 0.22%)</title><rect x="0.1803%" y="692" width="0.2164%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="6"/><text x="0.4303%" y="702.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (6 samples, 0.22%)</title><rect x="0.1803%" y="708" width="0.2164%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="6"/><text x="0.4303%" y="718.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (6 samples, 0.22%)</title><rect x="0.1803%" y="724" width="0.2164%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="6"/><text x="0.4303%" y="734.50"></text></g><g><title>&lt;module&gt; (numpy\lib\__init__.py:16) (7 samples, 0.25%)</title><rect x="0.1803%" y="292" width="0.2524%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="7"/><text x="0.4303%" y="302.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1078) (7 samples, 0.25%)</title><rect x="0.1803%" y="308" width="0.2524%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="7"/><text x="0.4303%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (7 samples, 0.25%)</title><rect x="0.1803%" y="324" width="0.2524%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="7"/><text x="0.4303%" y="334.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (7 samples, 0.25%)</title><rect x="0.1803%" y="340" width="0.2524%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="7"/><text x="0.4303%" y="350.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (7 samples, 0.25%)</title><rect x="0.1803%" y="356" width="0.2524%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="7"/><text x="0.4303%" y="366.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (7 samples, 0.25%)</title><rect x="0.1803%" y="372" width="0.2524%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="7"/><text x="0.4303%" y="382.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (7 samples, 0.25%)</title><rect x="0.1803%" y="388" width="0.2524%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="7"/><text x="0.4303%" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (7 samples, 0.25%)</title><rect x="0.1803%" y="404" width="0.2524%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="7"/><text x="0.4303%" y="414.50"></text></g><g><title>&lt;module&gt; (numpy\lib\npyio.py:1) (7 samples, 0.25%)</title><rect x="0.1803%" y="420" width="0.2524%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="7"/><text x="0.4303%" y="430.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (7 samples, 0.25%)</title><rect x="0.1803%" y="436" width="0.2524%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="7"/><text x="0.4303%" y="446.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (7 samples, 0.25%)</title><rect x="0.1803%" y="452" width="0.2524%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="7"/><text x="0.4303%" y="462.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (7 samples, 0.25%)</title><rect x="0.1803%" y="468" width="0.2524%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="7"/><text x="0.4303%" y="478.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (7 samples, 0.25%)</title><rect x="0.1803%" y="484" width="0.2524%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="7"/><text x="0.4303%" y="494.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (7 samples, 0.25%)</title><rect x="0.1803%" y="500" width="0.2524%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="7"/><text x="0.4303%" y="510.50"></text></g><g><title>&lt;module&gt; (tiny_transformer.py:1) (14 samples, 0.50%)</title><rect x="0.0000%" y="68" width="0.5049%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="14"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (14 samples, 0.50%)</title><rect x="0.0000%" y="84" width="0.5049%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="14"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (14 samples, 0.50%)</title><rect x="0.0000%" y="100" width="0.5049%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="14"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (14 samples, 0.50%)</title><rect x="0.0000%" y="116" width="0.5049%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="14"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (14 samples, 0.50%)</title><rect x="0.0000%" y="132" width="0.5049%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="14"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (14 samples, 0.50%)</title><rect x="0.0000%" y="148" width="0.5049%" height="15" fill="rgb(251,118,11)" fg:x="0" fg:w="14"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (numpy\__init__.py:181) (9 samples, 0.32%)</title><rect x="0.1803%" y="164" width="0.3246%" height="15" fill="rgb(217,147,25)" fg:x="5" fg:w="9"/><text x="0.4303%" y="174.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1078) (9 samples, 0.32%)</title><rect x="0.1803%" y="180" width="0.3246%" height="15" fill="rgb(247,81,37)" fg:x="5" fg:w="9"/><text x="0.4303%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (9 samples, 0.32%)</title><rect x="0.1803%" y="196" width="0.3246%" height="15" fill="rgb(209,12,38)" fg:x="5" fg:w="9"/><text x="0.4303%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (9 samples, 0.32%)</title><rect x="0.1803%" y="212" width="0.3246%" height="15" fill="rgb(227,1,9)" fg:x="5" fg:w="9"/><text x="0.4303%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (9 samples, 0.32%)</title><rect x="0.1803%" y="228" width="0.3246%" height="15" fill="rgb(248,47,43)" fg:x="5" fg:w="9"/><text x="0.4303%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (9 samples, 0.32%)</title><rect x="0.1803%" y="244" width="0.3246%" height="15" fill="rgb(221,10,30)" fg:x="5" fg:w="9"/><text x="0.4303%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (9 samples, 0.32%)</title><rect x="0.1803%" y="260" width="0.3246%" height="15" fill="rgb(210,229,1)" fg:x="5" fg:w="9"/><text x="0.4303%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (9 samples, 0.32%)</title><rect x="0.1803%" y="276" width="0.3246%" height="15" fill="rgb(222,148,37)" fg:x="5" fg:w="9"/><text x="0.4303%" y="286.50"></text></g><g><title>&lt;module&gt; (tiny_transformer.py:187) (4 samples, 0.14%)</title><rect x="0.5770%" y="68" width="0.1442%" height="15" fill="rgb(234,67,33)" fg:x="16" fg:w="4"/><text x="0.8270%" y="78.50"></text></g><g><title>generate_random_tokens (tiny_transformer.py:165) (4 samples, 0.14%)</title><rect x="0.5770%" y="84" width="0.1442%" height="15" fill="rgb(247,98,35)" fg:x="16" fg:w="4"/><text x="0.8270%" y="94.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:100) (4 samples, 0.14%)</title><rect x="0.7573%" y="84" width="0.1442%" height="15" fill="rgb(247,138,52)" fg:x="21" fg:w="4"/><text x="1.0073%" y="94.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2475) (4 samples, 0.14%)</title><rect x="0.9016%" y="148" width="0.1442%" height="15" fill="rgb(213,79,30)" fg:x="25" fg:w="4"/><text x="1.1516%" y="158.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:52) (4 samples, 0.14%)</title><rect x="1.9834%" y="196" width="0.1442%" height="15" fill="rgb(246,177,23)" fg:x="55" fg:w="4"/><text x="2.2334%" y="206.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (8 samples, 0.29%)</title><rect x="2.8489%" y="212" width="0.2885%" height="15" fill="rgb(230,62,27)" fg:x="79" fg:w="8"/><text x="3.0989%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (7 samples, 0.25%)</title><rect x="3.1374%" y="212" width="0.2524%" height="15" fill="rgb(216,154,8)" fg:x="87" fg:w="7"/><text x="3.3874%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (30 samples, 1.08%)</title><rect x="3.3898%" y="212" width="1.0819%" height="15" fill="rgb(244,35,45)" fg:x="94" fg:w="30"/><text x="3.6398%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (21 samples, 0.76%)</title><rect x="3.7144%" y="228" width="0.7573%" height="15" fill="rgb(251,115,12)" fg:x="103" fg:w="21"/><text x="3.9644%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (95 samples, 3.43%)</title><rect x="1.1179%" y="164" width="3.4259%" height="15" fill="rgb(240,54,50)" fg:x="31" fg:w="95"/><text x="1.3679%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (79 samples, 2.85%)</title><rect x="1.6949%" y="180" width="2.8489%" height="15" fill="rgb(233,84,52)" fg:x="47" fg:w="79"/><text x="1.9449%" y="190.50">cl..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (66 samples, 2.38%)</title><rect x="2.1637%" y="196" width="2.3801%" height="15" fill="rgb(207,117,47)" fg:x="60" fg:w="66"/><text x="2.4137%" y="206.50">_w..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (165 samples, 5.95%)</title><rect x="1.0458%" y="148" width="5.9502%" height="15" fill="rgb(249,43,39)" fg:x="29" fg:w="165"/><text x="1.2958%" y="158.50">_vectori..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (68 samples, 2.45%)</title><rect x="4.5438%" y="164" width="2.4522%" height="15" fill="rgb(209,38,44)" fg:x="126" fg:w="68"/><text x="4.7938%" y="174.50">fl..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (34 samples, 1.23%)</title><rect x="5.7699%" y="180" width="1.2261%" height="15" fill="rgb(236,212,23)" fg:x="160" fg:w="34"/><text x="6.0199%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (29 samples, 1.05%)</title><rect x="5.9502%" y="196" width="1.0458%" height="15" fill="rgb(242,79,21)" fg:x="165" fg:w="29"/><text x="6.2002%" y="206.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:103) (170 samples, 6.13%)</title><rect x="0.9016%" y="84" width="6.1305%" height="15" fill="rgb(211,96,35)" fg:x="25" fg:w="170"/><text x="1.1516%" y="94.50">tiny_tra..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (170 samples, 6.13%)</title><rect x="0.9016%" y="100" width="6.1305%" height="15" fill="rgb(253,215,40)" fg:x="25" fg:w="170"/><text x="1.1516%" y="110.50">quantize..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (170 samples, 6.13%)</title><rect x="0.9016%" y="116" width="6.1305%" height="15" fill="rgb(211,81,21)" fg:x="25" fg:w="170"/><text x="1.1516%" y="126.50">__call__..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (170 samples, 6.13%)</title><rect x="0.9016%" y="132" width="6.1305%" height="15" fill="rgb(208,190,38)" fg:x="25" fg:w="170"/><text x="1.1516%" y="142.50">_call_as..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2475) (4 samples, 0.14%)</title><rect x="7.0682%" y="148" width="0.1442%" height="15" fill="rgb(235,213,38)" fg:x="196" fg:w="4"/><text x="7.3182%" y="158.50"></text></g><g><title>_get_ufunc_and_otypes (numpy\lib\_function_base_impl.py:2435) (3 samples, 0.11%)</title><rect x="7.1042%" y="164" width="0.1082%" height="15" fill="rgb(237,122,38)" fg:x="197" fg:w="3"/><text x="7.3542%" y="174.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (3 samples, 0.11%)</title><rect x="7.1042%" y="180" width="0.1082%" height="15" fill="rgb(244,218,35)" fg:x="197" fg:w="3"/><text x="7.3542%" y="190.50"></text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (3 samples, 0.11%)</title><rect x="7.1042%" y="196" width="0.1082%" height="15" fill="rgb(240,68,47)" fg:x="197" fg:w="3"/><text x="7.3542%" y="206.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (3 samples, 0.11%)</title><rect x="7.1042%" y="212" width="0.1082%" height="15" fill="rgb(210,16,53)" fg:x="197" fg:w="3"/><text x="7.3542%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (7 samples, 0.25%)</title><rect x="8.2582%" y="212" width="0.2524%" height="15" fill="rgb(235,124,12)" fg:x="229" fg:w="7"/><text x="8.5082%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (4 samples, 0.14%)</title><rect x="8.5106%" y="212" width="0.1442%" height="15" fill="rgb(224,169,11)" fg:x="236" fg:w="4"/><text x="8.7606%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:100) (3 samples, 0.11%)</title><rect x="9.0876%" y="228" width="0.1082%" height="15" fill="rgb(250,166,2)" fg:x="252" fg:w="3"/><text x="9.3376%" y="238.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (54 samples, 1.95%)</title><rect x="8.6549%" y="212" width="1.9473%" height="15" fill="rgb(242,216,29)" fg:x="240" fg:w="54"/><text x="8.9049%" y="222.50">_..</text></g><g><title>_clip (numpy\_core\_methods.py:108) (38 samples, 1.37%)</title><rect x="9.2319%" y="228" width="1.3704%" height="15" fill="rgb(230,116,27)" fg:x="256" fg:w="38"/><text x="9.4819%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (92 samples, 3.32%)</title><rect x="7.3927%" y="164" width="3.3177%" height="15" fill="rgb(228,99,48)" fg:x="205" fg:w="92"/><text x="7.6427%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (84 samples, 3.03%)</title><rect x="7.6812%" y="180" width="3.0292%" height="15" fill="rgb(253,11,6)" fg:x="213" fg:w="84"/><text x="7.9312%" y="190.50">cli..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (77 samples, 2.78%)</title><rect x="7.9336%" y="196" width="2.7768%" height="15" fill="rgb(247,143,39)" fg:x="220" fg:w="77"/><text x="8.1836%" y="206.50">_w..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:48) (3 samples, 0.11%)</title><rect x="10.6022%" y="212" width="0.1082%" height="15" fill="rgb(236,97,10)" fg:x="294" fg:w="3"/><text x="10.8522%" y="222.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:109) (166 samples, 5.99%)</title><rect x="7.0682%" y="84" width="5.9863%" height="15" fill="rgb(233,208,19)" fg:x="196" fg:w="166"/><text x="7.3182%" y="94.50">tiny_tra..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (166 samples, 5.99%)</title><rect x="7.0682%" y="100" width="5.9863%" height="15" fill="rgb(216,164,2)" fg:x="196" fg:w="166"/><text x="7.3182%" y="110.50">quantize..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (166 samples, 5.99%)</title><rect x="7.0682%" y="116" width="5.9863%" height="15" fill="rgb(220,129,5)" fg:x="196" fg:w="166"/><text x="7.3182%" y="126.50">__call__..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (166 samples, 5.99%)</title><rect x="7.0682%" y="132" width="5.9863%" height="15" fill="rgb(242,17,10)" fg:x="196" fg:w="166"/><text x="7.3182%" y="142.50">_call_as..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (160 samples, 5.77%)</title><rect x="7.2845%" y="148" width="5.7699%" height="15" fill="rgb(242,107,0)" fg:x="202" fg:w="160"/><text x="7.5345%" y="158.50">_vector..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (65 samples, 2.34%)</title><rect x="10.7104%" y="164" width="2.3440%" height="15" fill="rgb(251,28,31)" fg:x="297" fg:w="65"/><text x="10.9604%" y="174.50">f..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (41 samples, 1.48%)</title><rect x="11.5759%" y="180" width="1.4785%" height="15" fill="rgb(233,223,10)" fg:x="321" fg:w="41"/><text x="11.8259%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (33 samples, 1.19%)</title><rect x="11.8644%" y="196" width="1.1900%" height="15" fill="rgb(215,21,27)" fg:x="329" fg:w="33"/><text x="12.1144%" y="206.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (6 samples, 0.22%)</title><rect x="14.4609%" y="212" width="0.2164%" height="15" fill="rgb(232,23,21)" fg:x="401" fg:w="6"/><text x="14.7109%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (7 samples, 0.25%)</title><rect x="14.6772%" y="212" width="0.2524%" height="15" fill="rgb(244,5,23)" fg:x="407" fg:w="7"/><text x="14.9272%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:105) (3 samples, 0.11%)</title><rect x="15.3264%" y="228" width="0.1082%" height="15" fill="rgb(226,81,46)" fg:x="425" fg:w="3"/><text x="15.5764%" y="238.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (47 samples, 1.69%)</title><rect x="14.9297%" y="212" width="1.6949%" height="15" fill="rgb(247,70,30)" fg:x="414" fg:w="47"/><text x="15.1797%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (33 samples, 1.19%)</title><rect x="15.4345%" y="228" width="1.1900%" height="15" fill="rgb(212,68,19)" fg:x="428" fg:w="33"/><text x="15.6845%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (95 samples, 3.43%)</title><rect x="13.4151%" y="164" width="3.4259%" height="15" fill="rgb(240,187,13)" fg:x="372" fg:w="95"/><text x="13.6651%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (90 samples, 3.25%)</title><rect x="13.5954%" y="180" width="3.2456%" height="15" fill="rgb(223,113,26)" fg:x="377" fg:w="90"/><text x="13.8454%" y="190.50">cli..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (80 samples, 2.88%)</title><rect x="13.9560%" y="196" width="2.8850%" height="15" fill="rgb(206,192,2)" fg:x="387" fg:w="80"/><text x="14.2060%" y="206.50">_w..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:48) (6 samples, 0.22%)</title><rect x="16.6246%" y="212" width="0.2164%" height="15" fill="rgb(241,108,4)" fg:x="461" fg:w="6"/><text x="16.8746%" y="222.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (190 samples, 6.85%)</title><rect x="13.1266%" y="148" width="6.8518%" height="15" fill="rgb(247,173,49)" fg:x="364" fg:w="190"/><text x="13.3766%" y="158.50">_vectoriz..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (87 samples, 3.14%)</title><rect x="16.8410%" y="164" width="3.1374%" height="15" fill="rgb(224,114,35)" fg:x="467" fg:w="87"/><text x="17.0910%" y="174.50">flo..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (53 samples, 1.91%)</title><rect x="18.0671%" y="180" width="1.9113%" height="15" fill="rgb(245,159,27)" fg:x="501" fg:w="53"/><text x="18.3171%" y="190.50">r..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (39 samples, 1.41%)</title><rect x="18.5719%" y="196" width="1.4064%" height="15" fill="rgb(245,172,44)" fg:x="515" fg:w="39"/><text x="18.8219%" y="206.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:115) (195 samples, 7.03%)</title><rect x="13.0545%" y="84" width="7.0321%" height="15" fill="rgb(236,23,11)" fg:x="362" fg:w="195"/><text x="13.3045%" y="94.50">tiny_tran..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (195 samples, 7.03%)</title><rect x="13.0545%" y="100" width="7.0321%" height="15" fill="rgb(205,117,38)" fg:x="362" fg:w="195"/><text x="13.3045%" y="110.50">quantize_..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (195 samples, 7.03%)</title><rect x="13.0545%" y="116" width="7.0321%" height="15" fill="rgb(237,72,25)" fg:x="362" fg:w="195"/><text x="13.3045%" y="126.50">__call__ ..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (195 samples, 7.03%)</title><rect x="13.0545%" y="132" width="7.0321%" height="15" fill="rgb(244,70,9)" fg:x="362" fg:w="195"/><text x="13.3045%" y="142.50">_call_as_..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2483) (3 samples, 0.11%)</title><rect x="19.9784%" y="148" width="0.1082%" height="15" fill="rgb(217,125,39)" fg:x="554" fg:w="3"/><text x="20.2284%" y="158.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:118) (3 samples, 0.11%)</title><rect x="20.0865%" y="84" width="0.1082%" height="15" fill="rgb(235,36,10)" fg:x="557" fg:w="3"/><text x="20.3365%" y="94.50"></text></g><g><title>mean (numpy\_core\fromnumeric.py:3596) (3 samples, 0.11%)</title><rect x="20.0865%" y="100" width="0.1082%" height="15" fill="rgb(251,123,47)" fg:x="557" fg:w="3"/><text x="20.3365%" y="110.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (16 samples, 0.58%)</title><rect x="21.7454%" y="212" width="0.5770%" height="15" fill="rgb(221,13,13)" fg:x="603" fg:w="16"/><text x="21.9954%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (7 samples, 0.25%)</title><rect x="22.3224%" y="212" width="0.2524%" height="15" fill="rgb(238,131,9)" fg:x="619" fg:w="7"/><text x="22.5724%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (44 samples, 1.59%)</title><rect x="22.5748%" y="212" width="1.5867%" height="15" fill="rgb(211,50,8)" fg:x="626" fg:w="44"/><text x="22.8248%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (32 samples, 1.15%)</title><rect x="23.0076%" y="228" width="1.1540%" height="15" fill="rgb(245,182,24)" fg:x="638" fg:w="32"/><text x="23.2576%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (106 samples, 3.82%)</title><rect x="20.3750%" y="164" width="3.8226%" height="15" fill="rgb(242,14,37)" fg:x="565" fg:w="106"/><text x="20.6250%" y="174.50">floa..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (98 samples, 3.53%)</title><rect x="20.6635%" y="180" width="3.5341%" height="15" fill="rgb(246,228,12)" fg:x="573" fg:w="98"/><text x="20.9135%" y="190.50">cli..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (81 samples, 2.92%)</title><rect x="21.2766%" y="196" width="2.9210%" height="15" fill="rgb(213,55,15)" fg:x="590" fg:w="81"/><text x="21.5266%" y="206.50">_w..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (175 samples, 6.31%)</title><rect x="20.3390%" y="148" width="6.3109%" height="15" fill="rgb(209,9,3)" fg:x="564" fg:w="175"/><text x="20.5890%" y="158.50">_vectori..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (68 samples, 2.45%)</title><rect x="24.1976%" y="164" width="2.4522%" height="15" fill="rgb(230,59,30)" fg:x="671" fg:w="68"/><text x="24.4476%" y="174.50">fl..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (38 samples, 1.37%)</title><rect x="25.2795%" y="180" width="1.3704%" height="15" fill="rgb(209,121,21)" fg:x="701" fg:w="38"/><text x="25.5295%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (31 samples, 1.12%)</title><rect x="25.5319%" y="196" width="1.1179%" height="15" fill="rgb(220,109,13)" fg:x="708" fg:w="31"/><text x="25.7819%" y="206.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:123) (179 samples, 6.46%)</title><rect x="20.2669%" y="84" width="6.4551%" height="15" fill="rgb(232,18,1)" fg:x="562" fg:w="179"/><text x="20.5169%" y="94.50">tiny_tra..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (179 samples, 6.46%)</title><rect x="20.2669%" y="100" width="6.4551%" height="15" fill="rgb(215,41,42)" fg:x="562" fg:w="179"/><text x="20.5169%" y="110.50">quantize..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (179 samples, 6.46%)</title><rect x="20.2669%" y="116" width="6.4551%" height="15" fill="rgb(224,123,36)" fg:x="562" fg:w="179"/><text x="20.5169%" y="126.50">__call__..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (179 samples, 6.46%)</title><rect x="20.2669%" y="132" width="6.4551%" height="15" fill="rgb(240,125,3)" fg:x="562" fg:w="179"/><text x="20.5169%" y="142.50">_call_as..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (9 samples, 0.32%)</title><rect x="28.0202%" y="212" width="0.3246%" height="15" fill="rgb(205,98,50)" fg:x="777" fg:w="9"/><text x="28.2702%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (9 samples, 0.32%)</title><rect x="28.3448%" y="212" width="0.3246%" height="15" fill="rgb(205,185,37)" fg:x="786" fg:w="9"/><text x="28.5948%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (42 samples, 1.51%)</title><rect x="28.6693%" y="212" width="1.5146%" height="15" fill="rgb(238,207,15)" fg:x="795" fg:w="42"/><text x="28.9193%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (33 samples, 1.19%)</title><rect x="28.9939%" y="228" width="1.1900%" height="15" fill="rgb(213,199,42)" fg:x="804" fg:w="33"/><text x="29.2439%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (96 samples, 3.46%)</title><rect x="26.9023%" y="164" width="3.4620%" height="15" fill="rgb(235,201,11)" fg:x="746" fg:w="96"/><text x="27.1523%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (89 samples, 3.21%)</title><rect x="27.1547%" y="180" width="3.2095%" height="15" fill="rgb(207,46,11)" fg:x="753" fg:w="89"/><text x="27.4047%" y="190.50">cli..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (80 samples, 2.88%)</title><rect x="27.4793%" y="196" width="2.8850%" height="15" fill="rgb(241,35,35)" fg:x="762" fg:w="80"/><text x="27.7293%" y="206.50">_w..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:48) (5 samples, 0.18%)</title><rect x="30.1839%" y="212" width="0.1803%" height="15" fill="rgb(243,32,47)" fg:x="837" fg:w="5"/><text x="30.4339%" y="222.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (158 samples, 5.70%)</title><rect x="26.8301%" y="148" width="5.6978%" height="15" fill="rgb(247,202,23)" fg:x="744" fg:w="158"/><text x="27.0801%" y="158.50">_vector..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (60 samples, 2.16%)</title><rect x="30.3642%" y="164" width="2.1637%" height="15" fill="rgb(219,102,11)" fg:x="842" fg:w="60"/><text x="30.6142%" y="174.50">f..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (38 samples, 1.37%)</title><rect x="31.1576%" y="180" width="1.3704%" height="15" fill="rgb(243,110,44)" fg:x="864" fg:w="38"/><text x="31.4076%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (27 samples, 0.97%)</title><rect x="31.5543%" y="196" width="0.9737%" height="15" fill="rgb(222,74,54)" fg:x="875" fg:w="27"/><text x="31.8043%" y="206.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:129) (162 samples, 5.84%)</title><rect x="26.7580%" y="84" width="5.8420%" height="15" fill="rgb(216,99,12)" fg:x="742" fg:w="162"/><text x="27.0080%" y="94.50">tiny_tr..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (162 samples, 5.84%)</title><rect x="26.7580%" y="100" width="5.8420%" height="15" fill="rgb(226,22,26)" fg:x="742" fg:w="162"/><text x="27.0080%" y="110.50">quantiz..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (162 samples, 5.84%)</title><rect x="26.7580%" y="116" width="5.8420%" height="15" fill="rgb(217,163,10)" fg:x="742" fg:w="162"/><text x="27.0080%" y="126.50">__call_..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (162 samples, 5.84%)</title><rect x="26.7580%" y="132" width="5.8420%" height="15" fill="rgb(213,25,53)" fg:x="742" fg:w="162"/><text x="27.0080%" y="142.50">_call_a..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (4 samples, 0.14%)</title><rect x="32.8164%" y="164" width="0.1442%" height="15" fill="rgb(252,105,26)" fg:x="910" fg:w="4"/><text x="33.0664%" y="174.50"></text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (3 samples, 0.11%)</title><rect x="32.8525%" y="180" width="0.1082%" height="15" fill="rgb(220,39,43)" fg:x="911" fg:w="3"/><text x="33.1025%" y="190.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:138) (9 samples, 0.32%)</title><rect x="32.7804%" y="84" width="0.3246%" height="15" fill="rgb(229,68,48)" fg:x="909" fg:w="9"/><text x="33.0304%" y="94.50"></text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (9 samples, 0.32%)</title><rect x="32.7804%" y="100" width="0.3246%" height="15" fill="rgb(252,8,32)" fg:x="909" fg:w="9"/><text x="33.0304%" y="110.50"></text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (9 samples, 0.32%)</title><rect x="32.7804%" y="116" width="0.3246%" height="15" fill="rgb(223,20,43)" fg:x="909" fg:w="9"/><text x="33.0304%" y="126.50"></text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (9 samples, 0.32%)</title><rect x="32.7804%" y="132" width="0.3246%" height="15" fill="rgb(229,81,49)" fg:x="909" fg:w="9"/><text x="33.0304%" y="142.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (8 samples, 0.29%)</title><rect x="32.8164%" y="148" width="0.2885%" height="15" fill="rgb(236,28,36)" fg:x="910" fg:w="8"/><text x="33.0664%" y="158.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (4 samples, 0.14%)</title><rect x="32.9607%" y="164" width="0.1442%" height="15" fill="rgb(249,185,26)" fg:x="914" fg:w="4"/><text x="33.2107%" y="174.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:33) (5 samples, 0.18%)</title><rect x="33.1410%" y="84" width="0.1803%" height="15" fill="rgb(249,174,33)" fg:x="919" fg:w="5"/><text x="33.3910%" y="94.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (6 samples, 0.22%)</title><rect x="34.7638%" y="212" width="0.2164%" height="15" fill="rgb(233,201,37)" fg:x="964" fg:w="6"/><text x="35.0138%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (5 samples, 0.18%)</title><rect x="34.9802%" y="212" width="0.1803%" height="15" fill="rgb(221,78,26)" fg:x="970" fg:w="5"/><text x="35.2302%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (38 samples, 1.37%)</title><rect x="35.1605%" y="212" width="1.3704%" height="15" fill="rgb(250,127,30)" fg:x="975" fg:w="38"/><text x="35.4105%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (27 samples, 0.97%)</title><rect x="35.5572%" y="228" width="0.9737%" height="15" fill="rgb(230,49,44)" fg:x="986" fg:w="27"/><text x="35.8072%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (90 samples, 3.25%)</title><rect x="33.6459%" y="164" width="3.2456%" height="15" fill="rgb(229,67,23)" fg:x="933" fg:w="90"/><text x="33.8959%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (79 samples, 2.85%)</title><rect x="34.0426%" y="180" width="2.8489%" height="15" fill="rgb(249,83,47)" fg:x="944" fg:w="79"/><text x="34.2926%" y="190.50">cl..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (73 samples, 2.63%)</title><rect x="34.2589%" y="196" width="2.6325%" height="15" fill="rgb(215,43,3)" fg:x="950" fg:w="73"/><text x="34.5089%" y="206.50">_w..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:48) (10 samples, 0.36%)</title><rect x="36.5308%" y="212" width="0.3606%" height="15" fill="rgb(238,154,13)" fg:x="1013" fg:w="10"/><text x="36.7808%" y="222.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:52) (4 samples, 0.14%)</title><rect x="37.5406%" y="196" width="0.1442%" height="15" fill="rgb(219,56,2)" fg:x="1041" fg:w="4"/><text x="37.7906%" y="206.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (152 samples, 5.48%)</title><rect x="33.4656%" y="148" width="5.4814%" height="15" fill="rgb(233,0,4)" fg:x="928" fg:w="152"/><text x="33.7156%" y="158.50">_vector..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (57 samples, 2.06%)</title><rect x="36.8915%" y="164" width="2.0555%" height="15" fill="rgb(235,30,7)" fg:x="1023" fg:w="57"/><text x="37.1415%" y="174.50">f..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (45 samples, 1.62%)</title><rect x="37.3242%" y="180" width="1.6228%" height="15" fill="rgb(250,79,13)" fg:x="1035" fg:w="45"/><text x="37.5742%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (35 samples, 1.26%)</title><rect x="37.6848%" y="196" width="1.2622%" height="15" fill="rgb(211,146,34)" fg:x="1045" fg:w="35"/><text x="37.9348%" y="206.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:36) (159 samples, 5.73%)</title><rect x="33.3213%" y="84" width="5.7339%" height="15" fill="rgb(228,22,38)" fg:x="924" fg:w="159"/><text x="33.5713%" y="94.50">tiny_tr..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (159 samples, 5.73%)</title><rect x="33.3213%" y="100" width="5.7339%" height="15" fill="rgb(235,168,5)" fg:x="924" fg:w="159"/><text x="33.5713%" y="110.50">quantiz..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (158 samples, 5.70%)</title><rect x="33.3574%" y="116" width="5.6978%" height="15" fill="rgb(221,155,16)" fg:x="925" fg:w="158"/><text x="33.6074%" y="126.50">__call_..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (158 samples, 5.70%)</title><rect x="33.3574%" y="132" width="5.6978%" height="15" fill="rgb(215,215,53)" fg:x="925" fg:w="158"/><text x="33.6074%" y="142.50">_call_a..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2483) (3 samples, 0.11%)</title><rect x="38.9470%" y="148" width="0.1082%" height="15" fill="rgb(223,4,10)" fg:x="1080" fg:w="3"/><text x="39.1970%" y="158.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:41) (3 samples, 0.11%)</title><rect x="39.1273%" y="84" width="0.1082%" height="15" fill="rgb(234,103,6)" fg:x="1085" fg:w="3"/><text x="39.3773%" y="94.50"></text></g><g><title>var (numpy\_core\fromnumeric.py:4008) (3 samples, 0.11%)</title><rect x="39.1273%" y="100" width="0.1082%" height="15" fill="rgb(227,97,0)" fg:x="1085" fg:w="3"/><text x="39.3773%" y="110.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2475) (4 samples, 0.14%)</title><rect x="39.2715%" y="148" width="0.1442%" height="15" fill="rgb(234,150,53)" fg:x="1089" fg:w="4"/><text x="39.5215%" y="158.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (8 samples, 0.29%)</title><rect x="40.5698%" y="212" width="0.2885%" height="15" fill="rgb(228,201,54)" fg:x="1125" fg:w="8"/><text x="40.8198%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (3 samples, 0.11%)</title><rect x="40.8583%" y="212" width="0.1082%" height="15" fill="rgb(222,22,37)" fg:x="1133" fg:w="3"/><text x="41.1083%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (41 samples, 1.48%)</title><rect x="40.9665%" y="212" width="1.4785%" height="15" fill="rgb(237,53,32)" fg:x="1136" fg:w="41"/><text x="41.2165%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (34 samples, 1.23%)</title><rect x="41.2189%" y="228" width="1.2261%" height="15" fill="rgb(233,25,53)" fg:x="1143" fg:w="34"/><text x="41.4689%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (90 samples, 3.25%)</title><rect x="39.4519%" y="164" width="3.2456%" height="15" fill="rgb(210,40,34)" fg:x="1094" fg:w="90"/><text x="39.7019%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (82 samples, 2.96%)</title><rect x="39.7404%" y="180" width="2.9571%" height="15" fill="rgb(241,220,44)" fg:x="1102" fg:w="82"/><text x="39.9904%" y="190.50">cli..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (71 samples, 2.56%)</title><rect x="40.1370%" y="196" width="2.5604%" height="15" fill="rgb(235,28,35)" fg:x="1113" fg:w="71"/><text x="40.3870%" y="206.50">_w..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:48) (7 samples, 0.25%)</title><rect x="42.4450%" y="212" width="0.2524%" height="15" fill="rgb(210,56,17)" fg:x="1177" fg:w="7"/><text x="42.6950%" y="222.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:45) (166 samples, 5.99%)</title><rect x="39.2715%" y="84" width="5.9863%" height="15" fill="rgb(224,130,29)" fg:x="1089" fg:w="166"/><text x="39.5215%" y="94.50">tiny_tra..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (166 samples, 5.99%)</title><rect x="39.2715%" y="100" width="5.9863%" height="15" fill="rgb(235,212,8)" fg:x="1089" fg:w="166"/><text x="39.5215%" y="110.50">quantize..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (166 samples, 5.99%)</title><rect x="39.2715%" y="116" width="5.9863%" height="15" fill="rgb(223,33,50)" fg:x="1089" fg:w="166"/><text x="39.5215%" y="126.50">__call__..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (166 samples, 5.99%)</title><rect x="39.2715%" y="132" width="5.9863%" height="15" fill="rgb(219,149,13)" fg:x="1089" fg:w="166"/><text x="39.5215%" y="142.50">_call_as..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (162 samples, 5.84%)</title><rect x="39.4158%" y="148" width="5.8420%" height="15" fill="rgb(250,156,29)" fg:x="1093" fg:w="162"/><text x="39.6658%" y="158.50">_vector..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (71 samples, 2.56%)</title><rect x="42.6974%" y="164" width="2.5604%" height="15" fill="rgb(216,193,19)" fg:x="1184" fg:w="71"/><text x="42.9474%" y="174.50">fl..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (44 samples, 1.59%)</title><rect x="43.6711%" y="180" width="1.5867%" height="15" fill="rgb(216,135,14)" fg:x="1211" fg:w="44"/><text x="43.9211%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (35 samples, 1.26%)</title><rect x="43.9957%" y="196" width="1.2622%" height="15" fill="rgb(241,47,5)" fg:x="1220" fg:w="35"/><text x="44.2457%" y="206.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (12 samples, 0.43%)</title><rect x="46.4479%" y="212" width="0.4327%" height="15" fill="rgb(233,42,35)" fg:x="1288" fg:w="12"/><text x="46.6979%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (5 samples, 0.18%)</title><rect x="46.8806%" y="212" width="0.1803%" height="15" fill="rgb(231,13,6)" fg:x="1300" fg:w="5"/><text x="47.1306%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (37 samples, 1.33%)</title><rect x="47.0609%" y="212" width="1.3343%" height="15" fill="rgb(207,181,40)" fg:x="1305" fg:w="37"/><text x="47.3109%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (32 samples, 1.15%)</title><rect x="47.2413%" y="228" width="1.1540%" height="15" fill="rgb(254,173,49)" fg:x="1310" fg:w="32"/><text x="47.4913%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (82 samples, 2.96%)</title><rect x="45.5824%" y="164" width="2.9571%" height="15" fill="rgb(221,1,38)" fg:x="1264" fg:w="82"/><text x="45.8324%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (73 samples, 2.63%)</title><rect x="45.9070%" y="180" width="2.6325%" height="15" fill="rgb(206,124,46)" fg:x="1273" fg:w="73"/><text x="46.1570%" y="190.50">cl..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (65 samples, 2.34%)</title><rect x="46.1955%" y="196" width="2.3440%" height="15" fill="rgb(249,21,11)" fg:x="1281" fg:w="65"/><text x="46.4455%" y="206.50">_..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:48) (4 samples, 0.14%)</title><rect x="48.3952%" y="212" width="0.1442%" height="15" fill="rgb(222,201,40)" fg:x="1342" fg:w="4"/><text x="48.6452%" y="222.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (150 samples, 5.41%)</title><rect x="45.5103%" y="148" width="5.4093%" height="15" fill="rgb(235,61,29)" fg:x="1262" fg:w="150"/><text x="45.7603%" y="158.50">_vector..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (66 samples, 2.38%)</title><rect x="48.5395%" y="164" width="2.3801%" height="15" fill="rgb(219,207,3)" fg:x="1346" fg:w="66"/><text x="48.7895%" y="174.50">fl..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (39 samples, 1.41%)</title><rect x="49.5132%" y="180" width="1.4064%" height="15" fill="rgb(222,56,46)" fg:x="1373" fg:w="39"/><text x="49.7632%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (29 samples, 1.05%)</title><rect x="49.8738%" y="196" width="1.0458%" height="15" fill="rgb(239,76,54)" fg:x="1383" fg:w="29"/><text x="50.1238%" y="206.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:53) (157 samples, 5.66%)</title><rect x="45.2939%" y="84" width="5.6617%" height="15" fill="rgb(231,124,27)" fg:x="1256" fg:w="157"/><text x="45.5439%" y="94.50">tiny_tr..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (157 samples, 5.66%)</title><rect x="45.2939%" y="100" width="5.6617%" height="15" fill="rgb(249,195,6)" fg:x="1256" fg:w="157"/><text x="45.5439%" y="110.50">quantiz..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (156 samples, 5.63%)</title><rect x="45.3300%" y="116" width="5.6257%" height="15" fill="rgb(237,174,47)" fg:x="1257" fg:w="156"/><text x="45.5800%" y="126.50">__call_..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (154 samples, 5.55%)</title><rect x="45.4021%" y="132" width="5.5536%" height="15" fill="rgb(206,201,31)" fg:x="1259" fg:w="154"/><text x="45.6521%" y="142.50">_call_a..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:53) (3 samples, 0.11%)</title><rect x="51.9293%" y="196" width="0.1082%" height="15" fill="rgb(231,57,52)" fg:x="1440" fg:w="3"/><text x="52.1793%" y="206.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (10 samples, 0.36%)</title><rect x="52.7227%" y="212" width="0.3606%" height="15" fill="rgb(248,177,22)" fg:x="1462" fg:w="10"/><text x="52.9727%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (33 samples, 1.19%)</title><rect x="53.1194%" y="212" width="1.1900%" height="15" fill="rgb(215,211,37)" fg:x="1473" fg:w="33"/><text x="53.3694%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (20 samples, 0.72%)</title><rect x="53.5882%" y="228" width="0.7212%" height="15" fill="rgb(241,128,51)" fg:x="1486" fg:w="20"/><text x="53.8382%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (87 samples, 3.14%)</title><rect x="51.2081%" y="164" width="3.1374%" height="15" fill="rgb(227,165,31)" fg:x="1420" fg:w="87"/><text x="51.4581%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (79 samples, 2.85%)</title><rect x="51.4966%" y="180" width="2.8489%" height="15" fill="rgb(228,167,24)" fg:x="1428" fg:w="79"/><text x="51.7466%" y="190.50">cl..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (64 samples, 2.31%)</title><rect x="52.0375%" y="196" width="2.3080%" height="15" fill="rgb(228,143,12)" fg:x="1443" fg:w="64"/><text x="52.2875%" y="206.50">_..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (178 samples, 6.42%)</title><rect x="50.9556%" y="116" width="6.4190%" height="15" fill="rgb(249,149,8)" fg:x="1413" fg:w="178"/><text x="51.2056%" y="126.50">__call__..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (177 samples, 6.38%)</title><rect x="50.9917%" y="132" width="6.3830%" height="15" fill="rgb(243,35,44)" fg:x="1414" fg:w="177"/><text x="51.2417%" y="142.50">_call_as..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (175 samples, 6.31%)</title><rect x="51.0638%" y="148" width="6.3109%" height="15" fill="rgb(246,89,9)" fg:x="1416" fg:w="175"/><text x="51.3138%" y="158.50">_vectori..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (84 samples, 3.03%)</title><rect x="54.3455%" y="164" width="3.0292%" height="15" fill="rgb(233,213,13)" fg:x="1507" fg:w="84"/><text x="54.5955%" y="174.50">flo..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (50 samples, 1.80%)</title><rect x="55.5716%" y="180" width="1.8031%" height="15" fill="rgb(233,141,41)" fg:x="1541" fg:w="50"/><text x="55.8216%" y="190.50">r..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (39 samples, 1.41%)</title><rect x="55.9683%" y="196" width="1.4064%" height="15" fill="rgb(239,167,4)" fg:x="1552" fg:w="39"/><text x="56.2183%" y="206.50"></text></g><g><title>__init__ (numpy\lib\_function_base_impl.py:2338) (3 samples, 0.11%)</title><rect x="57.3747%" y="116" width="0.1082%" height="15" fill="rgb(209,217,16)" fg:x="1591" fg:w="3"/><text x="57.6247%" y="126.50"></text></g><g><title>iterable (numpy\lib\_function_base_impl.py:382) (3 samples, 0.11%)</title><rect x="57.3747%" y="132" width="0.1082%" height="15" fill="rgb(219,88,35)" fg:x="1591" fg:w="3"/><text x="57.6247%" y="142.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:54) (182 samples, 6.56%)</title><rect x="50.9556%" y="84" width="6.5633%" height="15" fill="rgb(220,193,23)" fg:x="1413" fg:w="182"/><text x="51.2056%" y="94.50">tiny_tran..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (182 samples, 6.56%)</title><rect x="50.9556%" y="100" width="6.5633%" height="15" fill="rgb(230,90,52)" fg:x="1413" fg:w="182"/><text x="51.2056%" y="110.50">quantize_..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (7 samples, 0.25%)</title><rect x="58.6369%" y="212" width="0.2524%" height="15" fill="rgb(252,106,19)" fg:x="1626" fg:w="7"/><text x="58.8869%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (4 samples, 0.14%)</title><rect x="58.8893%" y="212" width="0.1442%" height="15" fill="rgb(206,74,20)" fg:x="1633" fg:w="4"/><text x="59.1393%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (36 samples, 1.30%)</title><rect x="59.0335%" y="212" width="1.2982%" height="15" fill="rgb(230,138,44)" fg:x="1637" fg:w="36"/><text x="59.2835%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (18 samples, 0.65%)</title><rect x="59.6827%" y="228" width="0.6491%" height="15" fill="rgb(235,182,43)" fg:x="1655" fg:w="18"/><text x="59.9327%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (81 samples, 2.92%)</title><rect x="57.5911%" y="164" width="2.9210%" height="15" fill="rgb(242,16,51)" fg:x="1597" fg:w="81"/><text x="57.8411%" y="174.50">fl..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (73 samples, 2.63%)</title><rect x="57.8796%" y="180" width="2.6325%" height="15" fill="rgb(248,9,4)" fg:x="1605" fg:w="73"/><text x="58.1296%" y="190.50">cl..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (62 samples, 2.24%)</title><rect x="58.2762%" y="196" width="2.2358%" height="15" fill="rgb(210,31,22)" fg:x="1616" fg:w="62"/><text x="58.5262%" y="206.50">_..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:48) (5 samples, 0.18%)</title><rect x="60.3318%" y="212" width="0.1803%" height="15" fill="rgb(239,54,39)" fg:x="1673" fg:w="5"/><text x="60.5818%" y="222.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:52) (3 samples, 0.11%)</title><rect x="61.5939%" y="196" width="0.1082%" height="15" fill="rgb(230,99,41)" fg:x="1708" fg:w="3"/><text x="61.8439%" y="206.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:55) (156 samples, 5.63%)</title><rect x="57.5189%" y="84" width="5.6257%" height="15" fill="rgb(253,106,12)" fg:x="1595" fg:w="156"/><text x="57.7689%" y="94.50">tiny_tr..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (156 samples, 5.63%)</title><rect x="57.5189%" y="100" width="5.6257%" height="15" fill="rgb(213,46,41)" fg:x="1595" fg:w="156"/><text x="57.7689%" y="110.50">quantiz..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (156 samples, 5.63%)</title><rect x="57.5189%" y="116" width="5.6257%" height="15" fill="rgb(215,133,35)" fg:x="1595" fg:w="156"/><text x="57.7689%" y="126.50">__call_..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (156 samples, 5.63%)</title><rect x="57.5189%" y="132" width="5.6257%" height="15" fill="rgb(213,28,5)" fg:x="1595" fg:w="156"/><text x="57.7689%" y="142.50">_call_a..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (155 samples, 5.59%)</title><rect x="57.5550%" y="148" width="5.5896%" height="15" fill="rgb(215,77,49)" fg:x="1596" fg:w="155"/><text x="57.8050%" y="158.50">_vector..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (73 samples, 2.63%)</title><rect x="60.5121%" y="164" width="2.6325%" height="15" fill="rgb(248,100,22)" fg:x="1678" fg:w="73"/><text x="60.7621%" y="174.50">fl..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (51 samples, 1.84%)</title><rect x="61.3054%" y="180" width="1.8392%" height="15" fill="rgb(208,67,9)" fg:x="1700" fg:w="51"/><text x="61.5554%" y="190.50">r..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (40 samples, 1.44%)</title><rect x="61.7021%" y="196" width="1.4425%" height="15" fill="rgb(219,133,21)" fg:x="1711" fg:w="40"/><text x="61.9521%" y="206.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2475) (4 samples, 0.14%)</title><rect x="63.1807%" y="148" width="0.1442%" height="15" fill="rgb(246,46,29)" fg:x="1752" fg:w="4"/><text x="63.4307%" y="158.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (6 samples, 0.22%)</title><rect x="64.6232%" y="212" width="0.2164%" height="15" fill="rgb(246,185,52)" fg:x="1792" fg:w="6"/><text x="64.8732%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (3 samples, 0.11%)</title><rect x="64.8395%" y="212" width="0.1082%" height="15" fill="rgb(252,136,11)" fg:x="1798" fg:w="3"/><text x="65.0895%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (37 samples, 1.33%)</title><rect x="64.9477%" y="212" width="1.3343%" height="15" fill="rgb(219,138,53)" fg:x="1801" fg:w="37"/><text x="65.1977%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (33 samples, 1.19%)</title><rect x="65.0920%" y="228" width="1.1900%" height="15" fill="rgb(211,51,23)" fg:x="1805" fg:w="33"/><text x="65.3420%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (78 samples, 2.81%)</title><rect x="63.5413%" y="164" width="2.8128%" height="15" fill="rgb(247,221,28)" fg:x="1762" fg:w="78"/><text x="63.7913%" y="174.50">fl..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (69 samples, 2.49%)</title><rect x="63.8658%" y="180" width="2.4883%" height="15" fill="rgb(251,222,45)" fg:x="1771" fg:w="69"/><text x="64.1158%" y="190.50">cl..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (59 samples, 2.13%)</title><rect x="64.2265%" y="196" width="2.1277%" height="15" fill="rgb(217,162,53)" fg:x="1781" fg:w="59"/><text x="64.4765%" y="206.50">_..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:52) (4 samples, 0.14%)</title><rect x="67.6524%" y="196" width="0.1442%" height="15" fill="rgb(229,93,14)" fg:x="1876" fg:w="4"/><text x="67.9024%" y="206.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (148 samples, 5.34%)</title><rect x="63.3970%" y="148" width="5.3372%" height="15" fill="rgb(209,67,49)" fg:x="1758" fg:w="148"/><text x="63.6470%" y="158.50">_vector..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (66 samples, 2.38%)</title><rect x="66.3541%" y="164" width="2.3801%" height="15" fill="rgb(213,87,29)" fg:x="1840" fg:w="66"/><text x="66.6041%" y="174.50">fl..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (36 samples, 1.30%)</title><rect x="67.4360%" y="180" width="1.2982%" height="15" fill="rgb(205,151,52)" fg:x="1870" fg:w="36"/><text x="67.6860%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (26 samples, 0.94%)</title><rect x="67.7966%" y="196" width="0.9376%" height="15" fill="rgb(253,215,39)" fg:x="1880" fg:w="26"/><text x="68.0466%" y="206.50"></text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (156 samples, 5.63%)</title><rect x="63.1807%" y="116" width="5.6257%" height="15" fill="rgb(221,220,41)" fg:x="1752" fg:w="156"/><text x="63.4307%" y="126.50">__call_..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (156 samples, 5.63%)</title><rect x="63.1807%" y="132" width="5.6257%" height="15" fill="rgb(218,133,21)" fg:x="1752" fg:w="156"/><text x="63.4307%" y="142.50">_call_a..</text></g><g><title>tiny_transformer_inference (tiny_transformer.py:61) (157 samples, 5.66%)</title><rect x="63.1807%" y="84" width="5.6617%" height="15" fill="rgb(221,193,43)" fg:x="1752" fg:w="157"/><text x="63.4307%" y="94.50">tiny_tr..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (157 samples, 5.66%)</title><rect x="63.1807%" y="100" width="5.6617%" height="15" fill="rgb(240,128,52)" fg:x="1752" fg:w="157"/><text x="63.4307%" y="110.50">quantiz..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (7 samples, 0.25%)</title><rect x="70.3570%" y="212" width="0.2524%" height="15" fill="rgb(253,114,12)" fg:x="1951" fg:w="7"/><text x="70.6070%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (5 samples, 0.18%)</title><rect x="70.6094%" y="212" width="0.1803%" height="15" fill="rgb(215,223,47)" fg:x="1958" fg:w="5"/><text x="70.8594%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (44 samples, 1.59%)</title><rect x="70.7898%" y="212" width="1.5867%" height="15" fill="rgb(248,225,23)" fg:x="1963" fg:w="44"/><text x="71.0398%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (36 samples, 1.30%)</title><rect x="71.0783%" y="228" width="1.2982%" height="15" fill="rgb(250,108,0)" fg:x="1971" fg:w="36"/><text x="71.3283%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (91 samples, 3.28%)</title><rect x="69.2391%" y="164" width="3.2816%" height="15" fill="rgb(228,208,7)" fg:x="1920" fg:w="91"/><text x="69.4891%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (86 samples, 3.10%)</title><rect x="69.4194%" y="180" width="3.1013%" height="15" fill="rgb(244,45,10)" fg:x="1925" fg:w="86"/><text x="69.6694%" y="190.50">cli..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (72 samples, 2.60%)</title><rect x="69.9243%" y="196" width="2.5965%" height="15" fill="rgb(207,125,25)" fg:x="1939" fg:w="72"/><text x="70.1743%" y="206.50">_w..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:48) (4 samples, 0.14%)</title><rect x="72.3765%" y="212" width="0.1442%" height="15" fill="rgb(210,195,18)" fg:x="2007" fg:w="4"/><text x="72.6265%" y="222.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:69) (159 samples, 5.73%)</title><rect x="69.0227%" y="84" width="5.7339%" height="15" fill="rgb(249,80,12)" fg:x="1914" fg:w="159"/><text x="69.2727%" y="94.50">tiny_tr..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (159 samples, 5.73%)</title><rect x="69.0227%" y="100" width="5.7339%" height="15" fill="rgb(221,65,9)" fg:x="1914" fg:w="159"/><text x="69.2727%" y="110.50">quantiz..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (157 samples, 5.66%)</title><rect x="69.0948%" y="116" width="5.6617%" height="15" fill="rgb(235,49,36)" fg:x="1916" fg:w="157"/><text x="69.3448%" y="126.50">__call_..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (157 samples, 5.66%)</title><rect x="69.0948%" y="132" width="5.6617%" height="15" fill="rgb(225,32,20)" fg:x="1916" fg:w="157"/><text x="69.3448%" y="142.50">_call_a..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (155 samples, 5.59%)</title><rect x="69.1670%" y="148" width="5.5896%" height="15" fill="rgb(215,141,46)" fg:x="1918" fg:w="155"/><text x="69.4170%" y="158.50">_vector..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (62 samples, 2.24%)</title><rect x="72.5207%" y="164" width="2.2358%" height="15" fill="rgb(250,160,47)" fg:x="2011" fg:w="62"/><text x="72.7707%" y="174.50">f..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (36 samples, 1.30%)</title><rect x="73.4583%" y="180" width="1.2982%" height="15" fill="rgb(216,222,40)" fg:x="2037" fg:w="36"/><text x="73.7083%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (28 samples, 1.01%)</title><rect x="73.7468%" y="196" width="1.0097%" height="15" fill="rgb(234,217,39)" fg:x="2045" fg:w="28"/><text x="73.9968%" y="206.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2475) (3 samples, 0.11%)</title><rect x="74.7926%" y="148" width="0.1082%" height="15" fill="rgb(207,178,40)" fg:x="2074" fg:w="3"/><text x="75.0426%" y="158.50"></text></g><g><title>_get_ufunc_and_otypes (numpy\lib\_function_base_impl.py:2435) (3 samples, 0.11%)</title><rect x="74.7926%" y="164" width="0.1082%" height="15" fill="rgb(221,136,13)" fg:x="2074" fg:w="3"/><text x="75.0426%" y="174.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (7 samples, 0.25%)</title><rect x="75.9106%" y="212" width="0.2524%" height="15" fill="rgb(249,199,10)" fg:x="2105" fg:w="7"/><text x="76.1606%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (7 samples, 0.25%)</title><rect x="76.1630%" y="212" width="0.2524%" height="15" fill="rgb(249,222,13)" fg:x="2112" fg:w="7"/><text x="76.4130%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (47 samples, 1.69%)</title><rect x="76.4154%" y="212" width="1.6949%" height="15" fill="rgb(244,185,38)" fg:x="2119" fg:w="47"/><text x="76.6654%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (39 samples, 1.41%)</title><rect x="76.7039%" y="228" width="1.4064%" height="15" fill="rgb(236,202,9)" fg:x="2127" fg:w="39"/><text x="76.9539%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (89 samples, 3.21%)</title><rect x="75.0090%" y="164" width="3.2095%" height="15" fill="rgb(250,229,37)" fg:x="2080" fg:w="89"/><text x="75.2590%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (83 samples, 2.99%)</title><rect x="75.2254%" y="180" width="2.9931%" height="15" fill="rgb(206,174,23)" fg:x="2086" fg:w="83"/><text x="75.4754%" y="190.50">cli..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (73 samples, 2.63%)</title><rect x="75.5860%" y="196" width="2.6325%" height="15" fill="rgb(211,33,43)" fg:x="2096" fg:w="73"/><text x="75.8360%" y="206.50">_w..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:48) (3 samples, 0.11%)</title><rect x="78.1103%" y="212" width="0.1082%" height="15" fill="rgb(245,58,50)" fg:x="2166" fg:w="3"/><text x="78.3603%" y="222.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (165 samples, 5.95%)</title><rect x="74.9369%" y="148" width="5.9502%" height="15" fill="rgb(244,68,36)" fg:x="2078" fg:w="165"/><text x="75.1869%" y="158.50">_vectori..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (74 samples, 2.67%)</title><rect x="78.2185%" y="164" width="2.6686%" height="15" fill="rgb(232,229,15)" fg:x="2169" fg:w="74"/><text x="78.4685%" y="174.50">fl..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (46 samples, 1.66%)</title><rect x="79.2283%" y="180" width="1.6589%" height="15" fill="rgb(254,30,23)" fg:x="2197" fg:w="46"/><text x="79.4783%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (35 samples, 1.26%)</title><rect x="79.6250%" y="196" width="1.2622%" height="15" fill="rgb(235,160,14)" fg:x="2208" fg:w="35"/><text x="79.8750%" y="206.50"></text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (171 samples, 6.17%)</title><rect x="74.7926%" y="116" width="6.1666%" height="15" fill="rgb(212,155,44)" fg:x="2074" fg:w="171"/><text x="75.0426%" y="126.50">__call__..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (171 samples, 6.17%)</title><rect x="74.7926%" y="132" width="6.1666%" height="15" fill="rgb(226,2,50)" fg:x="2074" fg:w="171"/><text x="75.0426%" y="142.50">_call_as..</text></g><g><title>tiny_transformer_inference (tiny_transformer.py:75) (172 samples, 6.20%)</title><rect x="74.7926%" y="84" width="6.2027%" height="15" fill="rgb(234,177,6)" fg:x="2074" fg:w="172"/><text x="75.0426%" y="94.50">tiny_tra..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (172 samples, 6.20%)</title><rect x="74.7926%" y="100" width="6.2027%" height="15" fill="rgb(217,24,9)" fg:x="2074" fg:w="172"/><text x="75.0426%" y="110.50">quantize..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2475) (3 samples, 0.11%)</title><rect x="80.9953%" y="148" width="0.1082%" height="15" fill="rgb(220,13,46)" fg:x="2246" fg:w="3"/><text x="81.2453%" y="158.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:52) (5 samples, 0.18%)</title><rect x="81.9329%" y="196" width="0.1803%" height="15" fill="rgb(239,221,27)" fg:x="2272" fg:w="5"/><text x="82.1829%" y="206.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (7 samples, 0.25%)</title><rect x="82.6542%" y="212" width="0.2524%" height="15" fill="rgb(222,198,25)" fg:x="2292" fg:w="7"/><text x="82.9042%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (7 samples, 0.25%)</title><rect x="82.9066%" y="212" width="0.2524%" height="15" fill="rgb(211,99,13)" fg:x="2299" fg:w="7"/><text x="83.1566%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (44 samples, 1.59%)</title><rect x="83.1590%" y="212" width="1.5867%" height="15" fill="rgb(232,111,31)" fg:x="2306" fg:w="44"/><text x="83.4090%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (35 samples, 1.26%)</title><rect x="83.4836%" y="228" width="1.2622%" height="15" fill="rgb(245,82,37)" fg:x="2315" fg:w="35"/><text x="83.7336%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (101 samples, 3.64%)</title><rect x="81.1756%" y="164" width="3.6423%" height="15" fill="rgb(227,149,46)" fg:x="2251" fg:w="101"/><text x="81.4256%" y="174.50">floa..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (91 samples, 3.28%)</title><rect x="81.5362%" y="180" width="3.2816%" height="15" fill="rgb(218,36,50)" fg:x="2261" fg:w="91"/><text x="81.7862%" y="190.50">cli..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (75 samples, 2.70%)</title><rect x="82.1132%" y="196" width="2.7047%" height="15" fill="rgb(226,80,48)" fg:x="2277" fg:w="75"/><text x="82.3632%" y="206.50">_w..</text></g><g><title>tiny_transformer_inference (tiny_transformer.py:81) (181 samples, 6.53%)</title><rect x="80.9953%" y="84" width="6.5272%" height="15" fill="rgb(238,224,15)" fg:x="2246" fg:w="181"/><text x="81.2453%" y="94.50">tiny_tran..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (181 samples, 6.53%)</title><rect x="80.9953%" y="100" width="6.5272%" height="15" fill="rgb(241,136,10)" fg:x="2246" fg:w="181"/><text x="81.2453%" y="110.50">quantize_..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (181 samples, 6.53%)</title><rect x="80.9953%" y="116" width="6.5272%" height="15" fill="rgb(208,32,45)" fg:x="2246" fg:w="181"/><text x="81.2453%" y="126.50">__call__ ..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (181 samples, 6.53%)</title><rect x="80.9953%" y="132" width="6.5272%" height="15" fill="rgb(207,135,9)" fg:x="2246" fg:w="181"/><text x="81.2453%" y="142.50">_call_as_..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (176 samples, 6.35%)</title><rect x="81.1756%" y="148" width="6.3469%" height="15" fill="rgb(206,86,44)" fg:x="2251" fg:w="176"/><text x="81.4256%" y="158.50">_vectori..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (75 samples, 2.70%)</title><rect x="84.8179%" y="164" width="2.7047%" height="15" fill="rgb(245,177,15)" fg:x="2352" fg:w="75"/><text x="85.0679%" y="174.50">fl..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (43 samples, 1.55%)</title><rect x="85.9719%" y="180" width="1.5507%" height="15" fill="rgb(206,64,50)" fg:x="2384" fg:w="43"/><text x="86.2219%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (36 samples, 1.30%)</title><rect x="86.2243%" y="196" width="1.2982%" height="15" fill="rgb(234,36,40)" fg:x="2391" fg:w="36"/><text x="86.4743%" y="206.50"></text></g><g><title>_mean (numpy\_core\_methods.py:115) (3 samples, 0.11%)</title><rect x="87.5225%" y="116" width="0.1082%" height="15" fill="rgb(213,64,8)" fg:x="2427" fg:w="3"/><text x="87.7725%" y="126.50"></text></g><g><title>_count_reduce_items (numpy\_core\_methods.py:87) (3 samples, 0.11%)</title><rect x="87.5225%" y="132" width="0.1082%" height="15" fill="rgb(210,75,36)" fg:x="2427" fg:w="3"/><text x="87.7725%" y="142.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:84) (4 samples, 0.14%)</title><rect x="87.5225%" y="84" width="0.1442%" height="15" fill="rgb(229,88,21)" fg:x="2427" fg:w="4"/><text x="87.7725%" y="94.50"></text></g><g><title>mean (numpy\_core\fromnumeric.py:3596) (4 samples, 0.14%)</title><rect x="87.5225%" y="100" width="0.1442%" height="15" fill="rgb(252,204,47)" fg:x="2427" fg:w="4"/><text x="87.7725%" y="110.50"></text></g><g><title>tiny_transformer_inference (tiny_transformer.py:85) (3 samples, 0.11%)</title><rect x="87.6668%" y="84" width="0.1082%" height="15" fill="rgb(208,77,27)" fg:x="2431" fg:w="3"/><text x="87.9168%" y="94.50"></text></g><g><title>var (numpy\_core\fromnumeric.py:4008) (3 samples, 0.11%)</title><rect x="87.6668%" y="100" width="0.1082%" height="15" fill="rgb(221,76,26)" fg:x="2431" fg:w="3"/><text x="87.9168%" y="110.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (7 samples, 0.25%)</title><rect x="89.6502%" y="212" width="0.2524%" height="15" fill="rgb(225,139,18)" fg:x="2486" fg:w="7"/><text x="89.9002%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (30 samples, 1.08%)</title><rect x="89.9748%" y="212" width="1.0819%" height="15" fill="rgb(230,137,11)" fg:x="2495" fg:w="30"/><text x="90.2248%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (24 samples, 0.87%)</title><rect x="90.1911%" y="228" width="0.8655%" height="15" fill="rgb(212,28,1)" fg:x="2501" fg:w="24"/><text x="90.4411%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (91 samples, 3.28%)</title><rect x="88.0274%" y="164" width="3.2816%" height="15" fill="rgb(248,164,17)" fg:x="2441" fg:w="91"/><text x="88.2774%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (78 samples, 2.81%)</title><rect x="88.4962%" y="180" width="2.8128%" height="15" fill="rgb(222,171,42)" fg:x="2454" fg:w="78"/><text x="88.7462%" y="190.50">cl..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (69 samples, 2.49%)</title><rect x="88.8208%" y="196" width="2.4883%" height="15" fill="rgb(243,84,45)" fg:x="2463" fg:w="69"/><text x="89.0708%" y="206.50">_w..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:48) (7 samples, 0.25%)</title><rect x="91.0566%" y="212" width="0.2524%" height="15" fill="rgb(252,49,23)" fg:x="2525" fg:w="7"/><text x="91.3066%" y="222.50"></text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (164 samples, 5.91%)</title><rect x="87.9553%" y="148" width="5.9142%" height="15" fill="rgb(215,19,7)" fg:x="2439" fg:w="164"/><text x="88.2053%" y="158.50">_vectori..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (71 samples, 2.56%)</title><rect x="91.3091%" y="164" width="2.5604%" height="15" fill="rgb(238,81,41)" fg:x="2532" fg:w="71"/><text x="91.5591%" y="174.50">fl..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (46 samples, 1.66%)</title><rect x="92.2106%" y="180" width="1.6589%" height="15" fill="rgb(210,199,37)" fg:x="2557" fg:w="46"/><text x="92.4606%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (33 samples, 1.19%)</title><rect x="92.6794%" y="196" width="1.1900%" height="15" fill="rgb(244,192,49)" fg:x="2570" fg:w="33"/><text x="92.9294%" y="206.50"></text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (169 samples, 6.09%)</title><rect x="87.8110%" y="116" width="6.0945%" height="15" fill="rgb(226,211,11)" fg:x="2435" fg:w="169"/><text x="88.0610%" y="126.50">__call__..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (169 samples, 6.09%)</title><rect x="87.8110%" y="132" width="6.0945%" height="15" fill="rgb(236,162,54)" fg:x="2435" fg:w="169"/><text x="88.0610%" y="142.50">_call_as..</text></g><g><title>tiny_transformer_inference (tiny_transformer.py:89) (170 samples, 6.13%)</title><rect x="87.8110%" y="84" width="6.1305%" height="15" fill="rgb(220,229,9)" fg:x="2435" fg:w="170"/><text x="88.0610%" y="94.50">tiny_tra..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (170 samples, 6.13%)</title><rect x="87.8110%" y="100" width="6.1305%" height="15" fill="rgb(250,87,22)" fg:x="2435" fg:w="170"/><text x="88.0610%" y="110.50">quantize..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:42) (10 samples, 0.36%)</title><rect x="95.3841%" y="212" width="0.3606%" height="15" fill="rgb(239,43,17)" fg:x="2645" fg:w="10"/><text x="95.6341%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:45) (5 samples, 0.18%)</title><rect x="95.7447%" y="212" width="0.1803%" height="15" fill="rgb(231,177,25)" fg:x="2655" fg:w="5"/><text x="95.9947%" y="222.50"></text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:46) (31 samples, 1.12%)</title><rect x="95.9250%" y="212" width="1.1179%" height="15" fill="rgb(219,179,1)" fg:x="2660" fg:w="31"/><text x="96.1750%" y="222.50"></text></g><g><title>_clip (numpy\_core\_methods.py:108) (26 samples, 0.94%)</title><rect x="96.1053%" y="228" width="0.9376%" height="15" fill="rgb(238,219,53)" fg:x="2665" fg:w="26"/><text x="96.3553%" y="238.50"></text></g><g><title>float_to_q5_10 (tiny_transformer.py:6) (89 samples, 3.21%)</title><rect x="94.0137%" y="164" width="3.2095%" height="15" fill="rgb(232,167,36)" fg:x="2607" fg:w="89"/><text x="94.2637%" y="174.50">flo..</text></g><g><title>clip (numpy\_core\fromnumeric.py:2247) (79 samples, 2.85%)</title><rect x="94.3743%" y="180" width="2.8489%" height="15" fill="rgb(244,19,51)" fg:x="2617" fg:w="79"/><text x="94.6243%" y="190.50">cl..</text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:54) (64 samples, 2.31%)</title><rect x="94.9153%" y="196" width="2.3080%" height="15" fill="rgb(224,6,22)" fg:x="2632" fg:w="64"/><text x="95.1653%" y="206.50">_..</text></g><g><title>_wrapit (numpy\_core\fromnumeric.py:48) (5 samples, 0.18%)</title><rect x="97.0429%" y="212" width="0.1803%" height="15" fill="rgb(224,145,5)" fg:x="2691" fg:w="5"/><text x="97.2929%" y="222.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:52) (4 samples, 0.14%)</title><rect x="98.6296%" y="196" width="0.1442%" height="15" fill="rgb(234,130,49)" fg:x="2735" fg:w="4"/><text x="98.8796%" y="206.50"></text></g><g><title>&lt;module&gt; (tiny_transformer.py:188) (2,752 samples, 99.24%)</title><rect x="0.7212%" y="68" width="99.2427%" height="15" fill="rgb(254,6,2)" fg:x="20" fg:w="2752"/><text x="0.9712%" y="78.50">&lt;module&gt; (tiny_transformer.py:188)</text></g><g><title>tiny_transformer_inference (tiny_transformer.py:95) (167 samples, 6.02%)</title><rect x="93.9416%" y="84" width="6.0224%" height="15" fill="rgb(208,96,46)" fg:x="2605" fg:w="167"/><text x="94.1916%" y="94.50">tiny_tra..</text></g><g><title>quantize_q5_10 (tiny_transformer.py:11) (167 samples, 6.02%)</title><rect x="93.9416%" y="100" width="6.0224%" height="15" fill="rgb(239,3,39)" fg:x="2605" fg:w="167"/><text x="94.1916%" y="110.50">quantize..</text></g><g><title>__call__ (numpy\lib\_function_base_impl.py:2397) (167 samples, 6.02%)</title><rect x="93.9416%" y="116" width="6.0224%" height="15" fill="rgb(233,210,1)" fg:x="2605" fg:w="167"/><text x="94.1916%" y="126.50">__call__..</text></g><g><title>_call_as_normal (numpy\lib\_function_base_impl.py:2390) (167 samples, 6.02%)</title><rect x="93.9416%" y="132" width="6.0224%" height="15" fill="rgb(244,137,37)" fg:x="2605" fg:w="167"/><text x="94.1916%" y="142.50">_call_as..</text></g><g><title>_vectorize_call (numpy\lib\_function_base_impl.py:2480) (166 samples, 5.99%)</title><rect x="93.9776%" y="148" width="5.9863%" height="15" fill="rgb(240,136,2)" fg:x="2606" fg:w="166"/><text x="94.2276%" y="158.50">_vectori..</text></g><g><title>float_to_q5_10 (tiny_transformer.py:7) (76 samples, 2.74%)</title><rect x="97.2232%" y="164" width="2.7407%" height="15" fill="rgb(239,18,37)" fg:x="2696" fg:w="76"/><text x="97.4732%" y="174.50">fl..</text></g><g><title>round (numpy\_core\fromnumeric.py:3451) (44 samples, 1.59%)</title><rect x="98.3772%" y="180" width="1.5867%" height="15" fill="rgb(218,185,22)" fg:x="2728" fg:w="44"/><text x="98.6272%" y="190.50"></text></g><g><title>_wrapfunc (numpy\_core\fromnumeric.py:57) (32 samples, 1.15%)</title><rect x="98.8100%" y="196" width="1.1540%" height="15" fill="rgb(225,218,4)" fg:x="2740" fg:w="32"/><text x="99.0600%" y="206.50"></text></g><g><title>all (2,773 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="2773"/><text x="0.2500%" y="62.50"></text></g></svg></svg>